"use strict";(self.webpackChunkyuweinong_blog=self.webpackChunkyuweinong_blog||[]).push([[6490],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),i=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=i(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=i(n),m=r,k=d["".concat(s,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var i=2;i<o;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6688:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return i},toc:function(){return p}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),l=["components"],c={id:"jest",title:"\u524d\u7aef\u5355\u5143\u6d4b\u8bd5\u4e4bJEST",tags:["\u5355\u5143\u6d4b\u8bd5","\u5de5\u5177"]},s=void 0,i={unversionedId:"jest",id:"jest",title:"\u524d\u7aef\u5355\u5143\u6d4b\u8bd5\u4e4bJEST",description:"\u4f7f\u7528\u524d\u7684\u51c6\u5907\u5de5\u4f5c",source:"@site/docs/jest.md",sourceDirName:".",slug:"/jest",permalink:"/myDocusaurus/docs/jest",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/jest.md",tags:[{label:"\u5355\u5143\u6d4b\u8bd5",permalink:"/myDocusaurus/docs/tags/\u5355\u5143\u6d4b\u8bd5"},{label:"\u5de5\u5177",permalink:"/myDocusaurus/docs/tags/\u5de5\u5177"}],version:"current",frontMatter:{id:"jest",title:"\u524d\u7aef\u5355\u5143\u6d4b\u8bd5\u4e4bJEST",tags:["\u5355\u5143\u6d4b\u8bd5","\u5de5\u5177"]},sidebar:"tutorialSidebar",previous:{title:"git\u547d\u4ee4",permalink:"/myDocusaurus/docs/git"},next:{title:"sass\u7528\u6cd5",permalink:"/myDocusaurus/docs/notes/sass"}},u={},p=[{value:"\u4f7f\u7528\u524d\u7684\u51c6\u5907\u5de5\u4f5c",id:"\u4f7f\u7528\u524d\u7684\u51c6\u5907\u5de5\u4f5c",level:2},{value:"\u6d4b\u8bd5\u7528\u4f8b",id:"\u6d4b\u8bd5\u7528\u4f8b",level:2},{value:"\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5\u51fd\u6570\u7684\u7528\u4f8b",id:"\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5\u51fd\u6570\u7684\u7528\u4f8b",level:3},{value:"\u6d4b\u8bd5\u5bf9\u8c61",id:"\u6d4b\u8bd5\u5bf9\u8c61",level:3},{value:"\u6d4b\u8bd5\u76f8\u53cd\u503c",id:"\u6d4b\u8bd5\u76f8\u53cd\u503c",level:3},{value:"\u771f\u503c\u6d4b\u8bd5",id:"\u771f\u503c\u6d4b\u8bd5",level:3},{value:"\u6d4b\u8bd5\u6d6e\u70b9\u6570",id:"\u6d4b\u8bd5\u6d6e\u70b9\u6570",level:3},{value:"\u6d4b\u8bd5\u5b57\u7b26\u4e32",id:"\u6d4b\u8bd5\u5b57\u7b26\u4e32",level:3},{value:"\u6d4b\u8bd5\u6570\u7ec4\u548c\u53ef\u8fed\u4ee3\u5bf9\u8c61",id:"\u6d4b\u8bd5\u6570\u7ec4\u548c\u53ef\u8fed\u4ee3\u5bf9\u8c61",level:3},{value:"\u6d4b\u8bd5\u51fd\u6570\u662f\u5426\u629b\u51fa\u9519\u8bef",id:"\u6d4b\u8bd5\u51fd\u6570\u662f\u5426\u629b\u51fa\u9519\u8bef",level:3},{value:"\u6d4b\u8bd5\u5f02\u6b65\u4ee3\u7801",id:"\u6d4b\u8bd5\u5f02\u6b65\u4ee3\u7801",level:3},{value:"\u4f7f\u7528 <code>mock</code> \u51fd\u6570",id:"\u4f7f\u7528-mock-\u51fd\u6570",level:3},{value:"\u6570\u636e\u66f4\u6539\u7684\u53ef\u89c6\u5316\u5de5\u5177",id:"\u6570\u636e\u66f4\u6539\u7684\u53ef\u89c6\u5316\u5de5\u5177",level:3},{value:"\u7528\u4e8e\u63d0\u53d6\u548c\u89e3\u6790JavaScript\u6587\u4ef6\u9876\u90e8\u7684\u6ce8\u91ca\u7684\u5de5\u5177",id:"\u7528\u4e8e\u63d0\u53d6\u548c\u89e3\u6790javascript\u6587\u4ef6\u9876\u90e8\u7684\u6ce8\u91ca\u7684\u5de5\u5177",level:3},{value:"\u8bc6\u522b\u503c\u7c7b\u578b",id:"\u8bc6\u522b\u503c\u7c7b\u578b",level:3},{value:"\u5b89\u88c5\u548c\u79fb\u9664",id:"\u5b89\u88c5\u548c\u79fb\u9664",level:3},{value:"\u6d4b\u8bd5\u5206\u7ec4",id:"\u6d4b\u8bd5\u5206\u7ec4",level:3}],d={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"\u4f7f\u7528\u524d\u7684\u51c6\u5907\u5de5\u4f5c"},"\u4f7f\u7528\u524d\u7684\u51c6\u5907\u5de5\u4f5c"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5b89\u88c5\u4f9d\u8d56")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"yarn add --dev jest")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u968f\u540e\uff0c\u5c06\u4e0b\u5217\u914d\u7f6e\u5185\u5bb9\u6dfb\u52a0\u5230\u60a8\u7684 ",(0,o.kt)("inlineCode",{parentName:"li"},"package.json"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="package.json"',title:'"package.json"'},'{\n  "scripts": {\n    "test": "jest"\n  }\n}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"\u5199\u5b8c\u6d4b\u8bd5\u6587\u4ef6\uff0c\u8fd0\u884c ",(0,o.kt)("inlineCode",{parentName:"li"},"yarn test"),"\u5c31\u53ef\u4ee5\u770b\u5230\u6253\u5370\u7ed3\u679c")),(0,o.kt)("h2",{id:"\u6d4b\u8bd5\u7528\u4f8b"},"\u6d4b\u8bd5\u7528\u4f8b"),(0,o.kt)("h3",{id:"\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5\u51fd\u6570\u7684\u7528\u4f8b"},"\u4e00\u4e2a\u7b80\u5355\u7684\u6d4b\u8bd5\u51fd\u6570\u7684\u7528\u4f8b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="sum.test.js"',title:'"sum.test.js"'},'const sum = require("../sum"); // \u5f15\u5165\u8981\u6d4b\u8bd5\u7684\u51fd\u6570\n\ntest("adds 1 + 2 to equal 3", () => {\n  expect(sum(1, 2)).toBe(3); // toBe \u662f\u7cbe\u51c6\u5339\u914d,\u4e00\u822c\u7528\u6765\u5339\u914d\u6570\u5b57\n});\n')),(0,o.kt)("h3",{id:"\u6d4b\u8bd5\u5bf9\u8c61"},"\u6d4b\u8bd5\u5bf9\u8c61"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'test("object equal", () => {\n  const data = {\n    one: 1,\n    two: {\n      kkk: "hello"\n    }\n  };\n  expect(data).toEqual({\n    one: 1,\n    two: {\n      kkk: "hello"\n    }\n  }); // toEqual \u4e00\u822c\u7528\u6765\u68c0\u67e5\u5bf9\u8c61\u7684\u503c\n});\n')),(0,o.kt)("h3",{id:"\u6d4b\u8bd5\u76f8\u53cd\u503c"},"\u6d4b\u8bd5\u76f8\u53cd\u503c"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'test("\u6d4b\u8bd5\u76f8\u53cd\u503c", () => {\n  expect(sum(1, 2)).not.toBe(4); //  not.toBe \u7528\u6765\u6d4b\u8bd5\u53cd\u4f8b\n});\n')),(0,o.kt)("h3",{id:"\u771f\u503c\u6d4b\u8bd5"},"\u771f\u503c\u6d4b\u8bd5"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'//  toBeNull \u53ea\u5339\u914d null\n//  toBeUndefined \u53ea\u5339\u914d undefined\n//  toBeDefined \u4e0e toBeUndefined \u76f8\u53cd\n//  toBeTruthy \u5339\u914d\u4efb\u4f55 if \u8bed\u53e5\u4e3a\u771f\n//  toBeFalsy \u5339\u914d\u4efb\u4f55 if \u8bed\u53e5\u4e3a\u5047\ntest("\u662f\u5426\u4e3anull", () => {\n  const data = 12\n  expect(data).toBeNull()\n})\n')),(0,o.kt)("h3",{id:"\u6d4b\u8bd5\u6d6e\u70b9\u6570"},"\u6d4b\u8bd5\u6d6e\u70b9\u6570"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'test("\u6d4b\u8bd5\u6d6e\u70b9\u6570", () => {\n  const value = 0.1 + 0.2;\n  // expect(0.3).toBe(0.3)     // \u6d4b\u8bd5\u4e0d\u901a\u8fc7  toBe\u548ctoEqual\u7528\u4e8e\u6d4b\u8bd5\u6ca1\u6709\u6d6e\u70b9\u8ba1\u7b97\u7684\u6570\n  expect(value).toBeCloseTo(0.3); // toBeCloseTo \u7528\u4e8e\u6d4b\u8bd5\u6d6e\u70b9\u6570\n});\n')),(0,o.kt)("h3",{id:"\u6d4b\u8bd5\u5b57\u7b26\u4e32"},"\u6d4b\u8bd5\u5b57\u7b26\u4e32"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'test("\u5b57\u7b26\u4e32\u91cc\u662f\u5426\u5305\u542b\u67d0\u4e2a\u5b57\u7b26", () => {\n  expect("test").not.toMatch(/i/); // toMatch \u7528\u4e8e\u6d4b\u8bd5\u5b57\u7b26\u4e32\n});\n\ntest("\u5b57\u7b26\u4e32\u662f\u5426\u5305\u542b\u67d0\u6bb5\u5b57\u7b26\u4e32", () => {\n  expect("helloworld").toMatch(/llow/);\n});\n\n')),(0,o.kt)("h3",{id:"\u6d4b\u8bd5\u6570\u7ec4\u548c\u53ef\u8fed\u4ee3\u5bf9\u8c61"},"\u6d4b\u8bd5\u6570\u7ec4\u548c\u53ef\u8fed\u4ee3\u5bf9\u8c61"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'test("\u6570\u7ec4\u6d4b\u8bd5", () => {\n  const arr = ["jack", "tom", "keven"];\n  // expect(arr).toContain(\'tom\');   // toContain \u7528\u4e8e\u6d4b\u8bd5\u6570\u7ec4\u548c\u53ef\u8fed\u4ee3\u5bf9\u8c61\u5305\u542b\u67d0\u4e00\u503c\n  expect(new Set(arr)).toContain("tom");\n});\n')),(0,o.kt)("h3",{id:"\u6d4b\u8bd5\u51fd\u6570\u662f\u5426\u629b\u51fa\u9519\u8bef"},"\u6d4b\u8bd5\u51fd\u6570\u662f\u5426\u629b\u51fa\u9519\u8bef"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'const testFun = () => {\n  throw new Error("this is an error");\n};\ntest("\u51fd\u6570\u629b\u51fa\u9519\u8bef", () => {\n  expect(() => {\n    testFun();\n  }).toThrow(); // toThrow \u7528\u4e8e\u6d4b\u8bd5\u51fd\u6570\u662f\u5426\u629b\u51fa\u9519\u8bef  \u6ce8\u610f\u26a0\ufe0f\u51fd\u6570\u9700\u8981\u5728expect\u7684\u5305\u88c5\u51fd\u6570\u4e2d\u8c03\u7528\n});\n')),(0,o.kt)("h3",{id:"\u6d4b\u8bd5\u5f02\u6b65\u4ee3\u7801"},"\u6d4b\u8bd5\u5f02\u6b65\u4ee3\u7801"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'test("\u6d4b\u8bd5\u5f02\u6b65\u51fd\u6570", () => {\n  function callBack(data) {\n    try {\n      expect(data).toBe("peanut butter");\n      done();\n    } catch (error) {\n      done(error);\n    }\n  }\n  fetchData(callback);  // fetchData \u4e3a\u8981\u6d4b\u8bd5\u7684\u5f02\u6b65\u51fd\u6570\n});\n\n// ********  Promise  *******\ntest("the data is peanut butter", () => {\n  return fetchData().then(data => {\n    expect(data).toBe("peanut butter");\n  });\n});\n\ntest("the data is peanut butter", () => {\n  return expect(fetchData()).resolves.toBe("peanut butter");\n});\n\ntest("the fetch fails with an error", () => {\n  expect.assertions(1);\n  return fetchData().catch(e => expect(e).toMatch("error"));\n});\n\ntest("the fetch fails with an error", () => {\n  return expect(fetchData()).rejects.toMatch("error");\n});\n\ntest("the data is peanut butter", async () => {\n  const data = await fetchData();\n  expect(data).toBe("peanut butter");\n});\n\ntest("the fetch fails with an error", async () => {\n  expect.assertions(1);\n  try {\n    await fetchData();\n  } catch (e) {\n    expect(e).toMatch("error");\n  }\n});\n')),(0,o.kt)("h3",{id:"\u4f7f\u7528-mock-\u51fd\u6570"},"\u4f7f\u7528 ",(0,o.kt)("inlineCode",{parentName:"h3"},"mock")," \u51fd\u6570"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"function forEach(items, callback) {\n  for (let index = 0; index < items.length; index++) {\n    callback(items[index]);\n  }\n}\nconst mockCallback = jest.fn(x => 42 + x);\nforEach([0, 1], mockCallback);\n\nexpect(mockCallback.mock.calls.length).toBe(2); // \u6b64 mock \u51fd\u6570\u88ab\u8c03\u7528\u4e86\u4e24\u6b21\nexpect(mockCallback.mock.calls[0][0]).toBe(0); // \u6b64 mock \u51fd\u6570\u7b2c\u4e00\u6b21\u8c03\u7528\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f0\nexpect(mockCallback.mock.calls[1][0]).toBe(1); // \u6b64 mock \u51fd\u6570\u7b2c\u4e8c\u6b21\u8c03\u7528\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f1\nexpect(mockCallback.mock.results[0].value).toBe(42); // \u6b64 mock \u51fd\u6570\u7b2c\u4e00\u6b21\u8c03\u7528\u7684\u7ed3\u679c\u662f42\nexpect(mockCallback.mock.results[1].value).toBe(43); // \u6b64 mock \u51fd\u6570\u7b2c\u4e8c\u6b21\u8c03\u7528\u7684\u7ed3\u679c\u662f43\n\n// ********* Mock \u7684\u8fd4\u56de\u503c ********\nconst myMock = jest.fn();\nconsole.log(myMock());\n// > undefined\n\nmyMock.mockReturnValueOnce(10).mockReturnValueOnce('x').mockReturnValue(true);\n\nconsole.log(myMock(), myMock(), myMock(), myMock());\n// > 10, 'x', true, true\n")),(0,o.kt)("h3",{id:"\u6570\u636e\u66f4\u6539\u7684\u53ef\u89c6\u5316\u5de5\u5177"},"\u6570\u636e\u66f4\u6539\u7684\u53ef\u89c6\u5316\u5de5\u5177"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  diff\n} = require('jest-diff');\n\nconst a = {\n  a: {\n    b: {\n      c: 5\n    }\n  }\n};\nconst b = {\n  a: {\n    b: {\n      c: 6\n    }\n  }\n};\n\nconst c = ['a', 'b'];\nconst d = ['b', 'a'];\n\nconst result = diff(a, b);\n\n// print diff\nconsole.log('diff', result);\nconsole.log(diff(c, d));\n")),(0,o.kt)("h3",{id:"\u7528\u4e8e\u63d0\u53d6\u548c\u89e3\u6790javascript\u6587\u4ef6\u9876\u90e8\u7684\u6ce8\u91ca\u7684\u5de5\u5177"},"\u7528\u4e8e\u63d0\u53d6\u548c\u89e3\u6790JavaScript\u6587\u4ef6\u9876\u90e8\u7684\u6ce8\u91ca\u7684\u5de5\u5177"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  parseWithComments\n} = require('jest-docblock');\n\nconst code = `\n/**\n * This is a sample\n *\n * @flow\n */\n\n console.log('Hello World!');\n`;\n\nconst parsed = parseWithComments(code);\n\n// prints an object with two attributes: comments and pragmas.\nconsole.log(parsed);\n")),(0,o.kt)("h3",{id:"\u8bc6\u522b\u503c\u7c7b\u578b"},"\u8bc6\u522b\u503c\u7c7b\u578b"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const {\n  getType\n} = require('jest-get-type');\n\nconst array = [1, 2, 3];\nconst nullValue = null;\nconst undefinedValue = undefined;\n\n// prints 'array'\nconsole.log(getType(array));\n// prints 'null'\nconsole.log(getType(nullValue));\n// prints 'undefined'\nconsole.log(getType(undefinedValue));\n")),(0,o.kt)("h3",{id:"\u5b89\u88c5\u548c\u79fb\u9664"},"\u5b89\u88c5\u548c\u79fb\u9664"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"beforeEach(() => {\n  // \u6bcf\u4e2a\u6d4b\u8bd5\u4e4b\u524d\u7684\u5904\u7406\u5de5\u4f5c\uff0clike dom\u6302\u8f7d\n});\n\nafterEach(() => {\n  // \u6bcf\u4e2a\u6d4b\u8bd5\u4e4b\u540e\u7684\u5904\u7406\u903b\u8f91\uff0clike \u5378\u8f7ddom\n});\n\n// ******* \u4e00\u6b21\u6027\u8bbe\u7f6e ********\n\nbeforeAll(() => {\n  // \u6240\u6709\u6d4b\u8bd5\u524d\u7edf\u4e00\u8bbe\u7f6e\u4e00\u4e0b\n});\n\nafterAll(() => {\n  // \u6240\u6709\u6d4b\u8bd5\u540e\u7edf\u4e00\u8bbe\u7f6e\u4e00\u4e0b\n});\n")),(0,o.kt)("h3",{id:"\u6d4b\u8bd5\u5206\u7ec4"},"\u6d4b\u8bd5\u5206\u7ec4"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// \u53ef\u4ee5\u901a\u8fc7 describe \u5757\u6765\u5c06\u6d4b\u8bd5\u5206\u7ec4\uff0c\u7c7b\u4f3c\u51fd\u6570\u4f5c\u7528\u57df    Jest \u4f1a\u5728\u6240\u6709\u771f\u6b63\u7684\u6d4b\u8bd5\u5f00\u59cb\u4e4b\u524d\u6267\u884c\u6d4b\u8bd5\u6587\u4ef6\u91cc\u6240\u6709\u7684 describe \u5904\u7406\u7a0b\u5e8f\n\ndescribe('matching cities to foods', () => {\n  // Applies only to tests in this describe block\n  beforeEach(() => {\n    return initializeFoodDatabase();\n  });\n\n  test('Vienna <3 veal', () => {\n    expect(isValidCityFoodPair('Vienna', 'Wiener Schnitzel')).toBe(true);\n  });\n\n  test('San Juan <3 plantains', () => {\n    expect(isValidCityFoodPair('San Juan', 'Mofongo')).toBe(true);\n  });\n});\n")))}m.isMDXComponent=!0}}]);